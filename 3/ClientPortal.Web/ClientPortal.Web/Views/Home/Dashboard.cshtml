@model ClientPortal.Web.Models.DashboardModel
@{
    var now = DateTime.Now;
    var firstOfMonthDT = new DateTime(now.Year, now.Month, 1);

    var today = now.ToString("d", Model.CultureInfo);
    var firstOfMonth = firstOfMonthDT.ToString("d", Model.CultureInfo);
    var firstOfYear = new DateTime(now.Year, 1, 1).ToString("d", Model.CultureInfo);
    //var firstOfLastMonth = firstOfMonthDT.AddMonths(-1).ToString("d", Model.CultureInfo);
    //var lastOfLastMonth = firstOfMonthDT.AddDays(-1).ToString("d", Model.CultureInfo);
}

<!-- Timeframe -->
<div class="row">
    <div class="twelve columns" style="top: -35px; height: 15px">
        <span style="float: left; margin-right: 5px">Timeframe:</span>
        <select style="float: left; width: 110px" id="dash_dateRangeSel" onchange="ChangeDashboardDateRange()">
            <option value="mtd">Month to Date</option>
            <option value="ytd">Year to Date</option>
            <option value="custom">- custom -</option>
        </select>
        <span style="float: left; margin-left: 10px">Start:</span>
        <input style="float:left; width:100px" id="dash_startdate" name="startdate" type="text" value="@Html.FormatDate(Model.Start, Model.CultureInfo)" onchange="DashboardDateChanged()" />
        <span style="float: left; margin-left: 10px">End:</span>
        <input style="float:left; width:100px" id="dash_enddate" name="enddate" type="text" value="@Html.FormatDate(Model.End, Model.CultureInfo)" onchange="DashboardDateChanged()" />
        <a class="button" style="padding: 3px; margin-left: 10px" id="dash_filterBtn" href="#" onclick="if($(this).attr('disabled') != 'disabled') RefreshDashboardRange(); return false">Refresh</a>
    </div>
</div>

<!-- Row 1 -->
<div class="row">

    <!-- Column 1 -->
    <div class="six columns">
        <div class="panel">
            <b>Summary Report</b>
            <table class="summarytable" style="width: 100%">
                <tr>
                    <th></th>
                    <th>Clicks</th>
                    <th>Leads</th>
                    <th>&nbsp;Spend</th>
                </tr>
                @foreach (var summary in Model.AdvertiserSummaries)
                {
                    <tr>
                        <td>@summary.Name</td>
                        <td>@String.Format("{0:n0}", summary.Clicks)</td>
                        <td>@String.Format("{0:n0}", summary.Conversions)</td>
                        <td>@summary.RevenueFormatted</td>
                    </tr>
                }
            </table>
        </div>
    </div>

    <!-- Column 2 -->
    <div class="six columns panel">
        <div id="perfChartOuter">
            <b>Performance</b>
            @Html.Partial("PerformanceVis")
        </div>
    </div>

</div>

<!-- Row 2 -->
<div class="row">

    <!-- Column 1 -->
    <div class="six columns">
        <div class="panel" id="projChartOuter">
            <span><b>Projection</b></span>
            <span id="projNote" style="float: right"></span>
            @Html.Partial("ProjectionVis")
        </div>
    </div>

    <!-- Column 2 -->
    <div class="six columns panel">
        <div id="heatMapOuter">
            <b>Conversions by State</b>
            @Html.Partial("_HeatMap")
        </div>
    </div>

</div>

<!-- Row 3 -->
<div class="row">

    <!-- Column 1 -->
    <div class="six columns">
        <div class="panel" id="spendChartOuter">
            <b>Budget</b>
            @Html.Partial("SpendVis")
        </div>
    </div>

    <!-- Column 2 -->
    <div class="six columns panel">
        <div id="weeklySpendBarChartOuter">
            <b>Budget Spent Weekly</b>
            <a href="#" onclick="ShowSpendMonthly(); return false">Switch to Monthly</a>
            <div class="chart-wrapper">
                <div id="weeklySpendBarChart"></div>
            </div>
        </div>
        <div id="monthlySpendBarChartOuter" style="display: none">
            <b>Budget Spent Monthly</b>
            <a href="#" onclick="ShowSpendWeekly(); return false">Switch to Weekly</a>
            <div class="chart-wrapper">
                <div id="monthlySpendBarChart"></div>
            </div>
        </div>
    </div>
</div>

<!-- Goal Rows -->
<div id="dashboardGoals">
    @Html.Partial("DashboardGoals", Model.OfferGoalSummaries)
</div>

<script>
    $(function () {
        kendo.culture('@Model.Culture');
        $('#dash_dateRangeSel').val('@Model.DateRangeType');
        $('#dash_startdate').kendoDatePicker();
        $('#dash_enddate').kendoDatePicker();

        CreatePerformanceChart([''], [0], 'N0', '@Model.Culture', 173);
        CreateSpendChart(0, 'C0', '@Model.Culture', 'Spend', 75);

        var projDS = CreateProjectionDataSource('@Html.Raw(Url.Action("DailySummaryData", "Reports", new { cumulative = true, projection = true }))');
        CreateProjectionChart(projDS, 180);
        projDS.read();
        projDS.bind('change', function () {
            var aggs = this.aggregates();
            var projNote = kendo.toString(aggs.Conversions.max, 'n0') + ' Leads by ' + aggs.Date.max.toLocaleDateString();
            $('#projNote').html(projNote);
            UpdateProjectionChart();
        });

        var spendDS = CreateDailySpendDataSource('@Url.Action("DailySummaryData", "Reports")');
        CreateSpendLineChart(spendDS, 'Daily Spend', 125);
        CreateWeeklySpendBarChart('weeklySpendBarChart', spendDS, 200);
        spendDS.read();
        spendDS.bind('change', function () {
            var aggs = this.aggregates();
            if ($('#dash_dateRangeSel').val() == 'mtd')
                UpdatePerformanceChartValues(['Last Month', 'MTD', 'Projection'], [@Model.SummaryLM.Conversions, aggs.Conversions.sum, Projection(aggs.Conversions.sum)]);
            else
                UpdatePerformanceChartValues([$('#dash_startdate').val() +' - '+ $('#dash_enddate').val()], [aggs.Conversions.sum]);
            UpdateSpendChartValue(aggs.Revenue.sum);
            UpdateSpendLineChart();
        });

        var monthlySpendDS = CreateMonthlySpendDataSource('@Url.Action("MonthlySummaryData", "Reports")', '@firstOfYear', '@today');
        CreateMonthlySpendBarChart('monthlySpendBarChart', monthlySpendDS, 200);
        monthlySpendDS.read();

        CreateGoalCharts(); @* //defined in DashboardGoals *@
    });

    function Projection(value) {
        var date = new Date();
        var numDays = date.getDate(); // # days gone by
        var daysInMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();
        return daysInMonth * value / numDays;
    }

    function RefreshDashboardRange() {
        $.get('@Url.Action("SetDashboardDateRange", "Home")', { type: $('#dash_dateRangeSel').val(), startdate: $('#dash_startdate').val(), enddate: $('#dash_enddate').val() });
        $('#spendLineChart').data('kendoChart').dataSource.read();
        $('#monthlySpendBarChart').data('kendoChart').dataSource.read();
        $('#projChart').data('kendoChart').dataSource.read();
    }

    function DashboardDateChanged() {
        $('#dash_dateRangeSel').val('custom');
    }
    function ChangeDashboardDateRange() {
        var startId = '#dash_startdate';
        var endId = '#dash_enddate';
        var refresh = true;
        var dateRange = $('#dash_dateRangeSel').val();
        switch (dateRange) {
            case "mtd":
                $(startId).val('@firstOfMonth');
                $(endId).val('@today');
                break;
            case "ytd":
                $(startId).val('@firstOfYear');
                $(endId).val('@today');
                break;
            default:
                refresh = false;
        }
        if (refresh) {
            RefreshDashboardRange();
        }
    }

    function ResizeDashboardCharts() {
        ResizeDashboardChart('proj', true);
        ResizeDashboardChart('perf', true);
        ResizeDashboardChart('spend', true);
        ResizeDashboardChart('weeklySpendBar', true);
        ResizeDashboardChart('monthlySpendBar', true);
        @foreach (var offersum in Model.OfferGoalSummaries)
        {
            <text>ResizeDashboardChart('goal@(offersum.Id)', true);</text>
        }
    }

    function ResizeDashboardChart(chart, refresh) {
        if ($('#' + chart + 'ChartOuter').length > 0) {
            var w = $('#' + chart + 'ChartOuter').width();
            if (w > 0) {
                $('#' + chart + 'ChartOuter .chart-wrapper').css('width', w);
                if (refresh) {
                    $('#' + chart + 'Chart').data('kendoChart').refresh();
                    if (chart == 'spend')
                        $('#' + chart + 'LineChart').data('kendoChart').refresh();
                }
            }
        }
    }

    function ShowSpendWeekly() {
        $('#monthlySpendBarChartOuter').hide();
        $('#weeklySpendBarChartOuter').show();
        ResizeDashboardChart('weeklySpendBar', true);
    }
    function ShowSpendMonthly() {
        //SetSpendBarChartBaseUnit('weeklySpendBarChart', 'months');
        $('#weeklySpendBarChartOuter').hide();
        $('#monthlySpendBarChartOuter').show();
        ResizeDashboardChart('monthlySpendBar', true);
    }

    function CreateMonthlyGoalChart(values, chartid, metric, valueFormat, culture, heading, subheading) {
        var categories = ['Last MTD','Last Month','MTD','Goal'];
        CreateGoalChart(categories, values, chartid, metric, valueFormat, culture, heading, subheading);
    }
    function CreateGoalChart(categories, values, chartid, metric, valueFormat, culture, heading, subheading) {
        $('#goal' + chartid + 'ChartHeading').html('<b>' + heading + '</b> ' + subheading);
        kendo.culture(culture);
        $('#goal' + chartid + 'Chart').kendoChart({
            chartArea: {
                height: 186
            },
            legend: {
                visible: false
            },
            seriesDefaults: {
                type: "column"
            },
            series: [{
                name: metric,
                data: values
            }],
            valueAxis: {
                labels: { format: valueFormat, step: 2 },
                title: { text: metric }
            },
            categoryAxis: {
                categories: categories
            },
            tooltip: {
                visible: true,
                format: valueFormat
            }
        });
    }
</script>
