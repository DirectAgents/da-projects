@model ClientPortal.Web.Areas.TD.Models.TDSummaryReportModel

<div style="height: 35px">
    <select style="width: 140px" id="summary_dateRangeSel" onchange="ChangeDateRange('summary', true)">@* show all in USD for now *@
        <option value="mtd">Month to Date</option>
        <option value="ytd">Year to Date</option>
        <option value="lastmonth">Last Month</option>
        <option value="custom">- custom -</option>
    </select>
    <span class="paddedlabel">Start:</span>
    <input id="summary_startdate" name="startdate" type="text" value="@Model.StartDate" onchange="DateChanged('summary')" />
    <span class="paddedlabel">End:</span>
    <input id="summary_enddate" name="enddate" type="text" value="@Model.EndDate" onchange="DateChanged('summary')" />  @* show all in USD for now *@
    <a class="button paddedbutton" id="summary_filterBtn" href="#" onclick="if($(this).attr('disabled') != 'disabled') RefreshGrid('summary', true); return false">Filter</a>
</div>

<div id="summaryChartSection" class="k-content">
    <div class="chart-wrapper">
        <div id="summaryChart"></div>
    </div>
</div>

<div class="row">
<div class="large-8 columns">

<h3>Totals</h3>
<table>
    <tr>
        <td>Date Range:</td>
        <td id="tdDateRange" style="font-weight:bold" colspan="5"></td>
    </tr>
    <tr>
        <td>Impressions:</td>
        <td id="tdImpressions" style="font-weight:bold; text-align:right"></td>
        <td>eCPM:</td>
        <td id="tdCPM" style="font-weight:bold; text-align:right"></td>
    </tr>
    <tr>
        <td>Clicks:</td>
        <td id="tdClicks" style="font-weight:bold; text-align:right"></td>
        <td>eCPC:</td>
        <td id="tdCPC" style="font-weight:bold; text-align:right"></td>
        <td>CTR:</td>
        <td id="tdCTR" style="font-weight:bold; text-align:right"></td>
    </tr>
@if (Model.UserInfo.TDAccount.ShowConversions)
{
    <tr>
        <td>Conversions:</td>
        <td id="tdConversions" style="font-weight:bold; text-align:right"></td>
        <td>eCPA:</td>
        <td id="tdCPA" style="font-weight:bold; text-align:right"></td>
        <td>ConvRate:</td>
        <td id="tdConvRate" style="font-weight:bold; text-align:right"></td>
    </tr>
}
    <tr>
        <td>Media Spend:</td>
        <td id="tdSpend" style="font-weight:bold; text-align:right"></td>
    </tr>
    <tr>
        <td>Management Fee:</td>
        <td id="tdMgmtFee" style="font-weight:bold; text-align:right"></td>
    </tr>
    <tr>
        <td>Total Spend:</td>
        <td id="tdTotalSpend" style="font-weight:bold; text-align:right"></td>
    </tr>
</table>
</div>

@{
    string firstSelectedValue = null;
    if (Model.MetricsToGraph.Length > 0) {
        firstSelectedValue = Model.MetricsToGraph[0];
    } else if (Model.AllMetricsSelectItems.Length > 0) {
        firstSelectedValue = Model.AllMetricsSelectItems[0].Value;
    }
    string secondSelectedValue = null;
    if (Model.MetricsToGraph.Length > 1) {
        secondSelectedValue = Model.MetricsToGraph[1];
    } else if (Model.AllMetricsSelectItems.Length > 1) {
        secondSelectedValue = Model.AllMetricsSelectItems[1].Value;
    }
}
<div class="large-4 columns">
    <h3>Chart Setup</h3>
    <table>
        <tr>
            <td>First Metric:</td>
            <td>@Html.DropDownList("selMetric1", new SelectList(Model.AllMetricsSelectItems, "Value", "Text", firstSelectedValue), new { style = "width:auto; padding-right:15px"})</td>
        </tr>
        <tr>
            <td>Second Metric:</td>
            <td>@Html.DropDownList("selMetric2", new SelectList(Model.AllMetricsSelectItems, "Value", "Text", secondSelectedValue), new { style = "width:auto; padding-right:15px"})</td>
        </tr>
        <tr>
            <td colspan="2"><input type="button" value="Redraw Chart" onclick="ChangeChartMetrics()" /></td>
        </tr>
    </table>
</div>
</div>

<script>
    function ChangeChartMetrics() {
        var metrics = [$('#selMetric1').val()];
        var metric2 = $('#selMetric2').val();
        if (metric2 != metrics[0])
            metrics.push(metric2);
        var a = ConstructSummaryChartArrays(metrics);
        var chart = $("#summaryChart").data("kendoChart");
        chart.setOptions({
            series: a.SeriesArray,
            valueAxis: a.ValueAxisArray
        });
        chart.refresh();
    }

    $(document).ready(function () {
        $('#summary_dateRangeSel').kendoDropDownList();
        $('#summary_startdate').kendoDatePicker({ footer: ' ' });
        $('#summary_enddate').kendoDatePicker({ footer: ' ' });

        var datasource = CreateSummaryDataSource();
        CreateSummaryChart(datasource);
        datasource.read();
        datasource.bind("change", SummaryDataSource_OnChange);
    });

    function SummaryDataSource_OnChange() {
        var aggs = this.aggregates();
        if (aggs) {
            $('#tdDateRange').html(aggs.Info.Start + ' - ' + aggs.Info.End);

            $('#tdImpressions').html(kendo.toString(aggs.Impressions.sum, 'N0'));
            $('#tdCPM').html(kendo.toString(aggs.CPM.agg, 'C3'));

            $('#tdClicks').html(kendo.toString(aggs.Clicks.sum, 'N0'));
            $('#tdCPC').html(kendo.toString(aggs.CPC.agg, 'C3'));
            $('#tdCTR').html(kendo.toString(aggs.CTR.agg, 'P3'));
@if (Model.UserInfo.TDAccount.ShowConversions)
{
    <text>$('#tdConversions').html(kendo.toString(aggs.Conversions.sum, 'N0'));</text>
    <text>$('#tdCPA').html(kendo.toString(aggs.CPA.agg, 'C'));</text>
    <text>$('#tdConvRate').html(kendo.toString(aggs.ConvRate.agg, 'P'));</text>
}
            $('#tdSpend').html(kendo.toString(aggs.Spend.sum, 'C'));
            $('#tdMgmtFee').html(kendo.toString(aggs.Spend.fee, 'C'));
            $('#tdTotalSpend').html(kendo.toString(aggs.Spend.total, 'C'));
        } else {
            $('#tdDateRange, #tdImpressions, #tdCPM, #tdClicks, #tdCPC, #tdCTR, #tdSpend, #tdMgmtFee, #tdTotalSpend').html('');
@if (Model.UserInfo.TDAccount.ShowConversions)
{
    <text>$('#tdConversions, #tdCPA, #tdConvRate').html('');</text>
}
        }
    }

    function CreateSummaryDataSource() {
        return new kendo.data.DataSource({
            serverPaging: true,
            serverSorting: true,
            serverFiltering: true,
            serverAggregates: true,
            pageSize: 100,
            transport: {
                read: {
                    type: 'post',
                    dataType: 'json',
                    url: '@Url.Action("SummaryData", "Stats")',
                    data: function () {
                        return {
                            startdate: $('#summary_startdate').val(),
                            enddate: $('#summary_enddate').val(),
                        };
                    }
                }
            },
            schema: {
                data: 'data',
                total: 'total',
                aggregates: 'aggregates',
                model: {
                    id: 'Id',
                    fields: {
                        Date: { type: 'date' },
                        Impressions: { type: 'number' },
                        Clicks: { type: 'number' },
                        Conversions: { type: 'number' },
                        Spend: { type: 'number' },
                        CTR: { type: 'number' },
                        ConvRate: { type: 'number' },
                        CPM: { type: 'number' },
                        CPC: { type: 'number' },
                        CPA: { type: 'number' }
                    }
                }
            },
            sort: { field: "Date", dir: "asc" },
            aggregate: [
                { field: "Impressions", aggregate: "sum" },
                { field: "Clicks", aggregate: "sum" },
                { field: "Conversions", aggregate: "sum" },
                { field: "Spend", aggregate: "sum" }
            ],
            requestEnd: function (e) {
                if (e.type == "read") {
                    var rows = e.response.data;
                    if (rows) {
                        for (var i = 0; i < rows.length; i++) {
                            rows[i].Date = rows[i].Date.replace(/\d+/, function (n) {
                                var time = parseInt(n);
                                return parseInt(time) + new Date(time).getTimezoneOffset() * 60000;
                            });
                        }
                    }
                }
            }
        });
    }

    function CreateSummaryChart(dataSource) {
        var metrics = [
@for (int i = 0; i < Model.MetricsToGraph.Length; i++)
{
    <text>"@(Model.MetricsToGraph[i])"@(i < Model.MetricsToGraph.Length -1 ? "," : "")</text>
}
        ];
        var a = ConstructSummaryChartArrays(metrics);
        CreateSummaryChartInner(dataSource, a.SeriesArray, a.ValueAxisArray);
    }

    function ConstructSummaryChartArrays(metrics) {
        var format, ttFormat, display;
        var seriesArray = [], valueAxisArray = [];
        var type = "column";
        for (var i = 0; i < metrics.length; i++)
        {
            if ($.inArray(metrics[i], nMetrics) > -1)
                format = "n0";
            else if ($.inArray(metrics[i], rMetrics) > -1)
                format = "p";
            else
                format = "c";

            if (metrics[i] == "CTR")
                ttFormat = "p3";
            else
                ttFormat = format;

            if ($.inArray(metrics[i], eMetrics) > -1)
                display = "e" + metrics[i];
            else if (metrics[i] == "Spend")
                display = "Media Spend";
            else
                display = metrics[i];

            if (i == 1)
                type = "line";
            seriesArray.push({ type: type, field: metrics[i], name: display, axis: metrics[i], markers: { visible: false }, tooltip: { template: "#= kendo.format('{0:d}',category) #: #= kendo.format('{0:" + ttFormat + "}',value) #" } });
            valueAxisArray.push({ name: metrics[i], labels: { format: format, step: 2 }, title: { text: display } });
        }
        return {
            SeriesArray: seriesArray,
            ValueAxisArray: valueAxisArray
        };
    }

    function CreateSummaryChartInner(dataSource, seriesArray, valueAxisArray) {
        $("#summaryChart").kendoChart({
            dataSource: dataSource,
            autoBind: false,
            chartArea: {
                height: 300
            },
            theme: $(document).data("kendoSkin") || "default",
            series: seriesArray,
            categoryAxis: {
                baseUnit: "days",
                field: "Date",
                labels: { rotation: -90 },
                axisCrossingValue: [0, 2000]
            },
            valueAxis: valueAxisArray,
            tooltip: {
                visible: true
            },
            legend: {
                position: "custom",
                offsetX: 110,
                offsetY: 0
            }
        });
    }
</script>
