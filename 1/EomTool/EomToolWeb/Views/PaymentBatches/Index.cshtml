@model PaymentBatchesViewModel

@{
    ViewBag.Title = "Payment Batches";
}

<h2>Payment Batches</h2>

@{
    int iPayment = 0;
}
@foreach (var pbatch in Model.Batches)
{
    <br />
    <span>
        Batch @pbatch.id
        @if (pbatch.payment_threshold != null) {
            <text>(threshold: @pbatch.payment_threshold)</text>
        }
        - @pbatch.PaymentBatchState.name
    </span>
    if (pbatch.Payments.Count() > 0)
    {
        var batchTotal = pbatch.Payments.Sum(p => p.PubPayout);
        var allItemIds = pbatch.Payments.Select(p => p.ItemIds).Aggregate((i, j) => i + "," + j);
        <table style="border:1px solid">
            <tr>
                <th>AffIds</th>
                <th>Publisher&nbsp;</th>
                <th>Payout</th>
                <th>PayMethod&nbsp;</th>
                <th>NetTerms&nbsp;</th>
                <th>AcctStatus</th>
                <th></th>
                <th>ItemIds</th>
            </tr>
            @foreach (var payment in pbatch.Payments)
            {
                <tr>
                    <td>@payment.AffIds</td>
                    <td>@payment.Publisher</td>
                    <td>@Model.FormatCurrency(payment.PubPayCurr, payment.PubPayout.Value)</td>
                    <td>@payment.PaymentMethod</td>
                    <td>@payment.NetTermType</td>
                    <td id="statusarea@(iPayment)">@payment.AccountingStatus</td>
                    <td id="actionarea@(iPayment)">
                        @using (Html.BeginForm("ReleaseItems", "PaymentBatches", FormMethod.Post, new { id = "form" + iPayment }))
                        {
                            <input type="hidden" name="itemids" value="@payment.ItemIds" />
                            <input type="button" value="Release" onclick="if (confirm('Press OK to confirm Release')) ReleasePayment(@iPayment)" />
                            if (Model.AllowHold) {
                                <input type="button" value="Hold" onclick="if (confirm('Press OK to confirm Hold')) HoldPayment(@iPayment)" />
                            }
                        }
                    </td>
                    <td><span title="@payment.ItemIds">@payment.ItemIds.Substring(0, payment.ItemIds.Length>10 ? 10 : payment.ItemIds.Length)..</span></td>
                </tr>
                iPayment++;
            }
            <tr>
                <td></td>
                <td></td>
                <td>@String.Format("{0:N2}", batchTotal)</td>
                <td></td>
                <td></td>
                <td></td>
                <td>
                    @if (pbatch.Payments.Count() > 1)
                    {
                        using (Html.BeginForm("ReleaseItems", "PaymentBatches", FormMethod.Post, new { onsubmit = "return confirm('Press OK to confirm Release All')" }))
                        {
                            <input type="hidden" name="itemids" value="@allItemIds" />
                            <input type="submit" value="Release All" />
                        }
                    }
                </td>
                <td></td>
            </tr>
        </table>
    }
    else {
        <br />
    }
} @* loop through batches *@

@section scripts {
<script type="text/javascript">
    function ReleasePayment(formid)
    {
        var form = $('#form' + formid);
        $('#statusarea' + formid).load('@Url.Action("ReleaseItems")', form.serialize());
    }

    function HoldPayment(formid)
    {
        var form = $('#form' + formid);
        $('#statusarea' + formid).load('@Url.Action("HoldItems")', form.serialize());
    }
</script>
}