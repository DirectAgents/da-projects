<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.CSharp" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ output extension=".cs" #>
<#
	namespaceName = System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint").ToString();
	fileExt = ".cshtml";
	baseDir = Host.ResolvePath(@".\Views");
	Run();
#>

<#+
string namespaceName;
string fileExt;
string baseDir;

void Run()
{
	CodeCompileUnit cu = new CodeCompileUnit();

	CodeNamespace myViews = new CodeNamespace(namespaceName);
	cu.Namespaces.Add(myViews);

	CodeTypeDeclaration viewNames = new CodeTypeDeclaration("ViewNames");
	myViews.Types.Add(viewNames);

	ProcessDir(new DirectoryInfo(baseDir), viewNames);

	Write(GenerateCSharpCode(cu));
}

void ProcessDir(DirectoryInfo di, CodeTypeDeclaration ctd)
{
	foreach (var fi in di.GetFiles())
	{
		ProcessFile(fi, ctd);
		foreach (var subDI in di.GetDirectories())
		{
			ProcessDir(subDI, AddClass(ctd, subDI.Name));
		}
	}
}

void ProcessFile(FileInfo fi, CodeTypeDeclaration ctd)
{
	if(fi.Name.EndsWith(fileExt))
	{
		string s = fi.Name.Split('.').First();
		AddStringConst(ctd, s, s);
	}
}

public static CodeTypeDeclaration AddClass(CodeTypeDeclaration ctd, string className)
{
	CodeTypeDeclaration newClass = new CodeTypeDeclaration(className);
	ctd.Members.Add(newClass);
	return newClass;
}

public static void AddStringConst(CodeTypeDeclaration codeTypeDecl, string memberName, string memberValue)
{
	CodeMemberField field = new CodeMemberField();
	field.Name = memberName;
	field.Type = new CodeTypeReference(typeof(string));
	field.Attributes = MemberAttributes.Public | MemberAttributes.Static;
	field.InitExpression = new CodePrimitiveExpression(memberValue);
	codeTypeDecl.Members.Add(field);
}

public string GenerateCSharpCode(CodeCompileUnit compileunit)
{
    CSharpCodeProvider provider = new CSharpCodeProvider();
	var sb = new StringBuilder();
	var tw = new IndentedTextWriter(new StringWriter(sb), "    ");
	provider.GenerateCodeFromCompileUnit(compileunit, tw, new CodeGeneratorOptions 
	{ 
		BlankLinesBetweenMembers = false,
		BracingStyle =  "C"
	});	
	tw.Close();
	return sb.ToString();
}
#>